;;; init-project.el --- Programming development -*- lexical-binding: t -*-

;;; Commentary:
;;

;;; Code:
(defvar project-ignore-directory-list '("/home/thomas" "/" "/var" "/proc" "/usr")
  "忽略指定目录作为项目目录.")

(defvar project-flag-list '((".project")
                            ("go.mod" "Cargo.toml" "project.clj" "pom.xml" "package.json") ;; higher priority
                            ("Makefile" "README.org" "README.md" "Readme.org" "Readme.md")))

(defvar +thomas/prettify-symbols-alist
  '(("lambda" . ?λ)
    ("<-"     . ?←)
    ("->"     . ?→)
    ("->>"    . ??)
    ("=>"     . ??)
    ("map"    . ??)
    ("/="     . ?≠)
    ("!="     . ?≠)
    ("=="     . ?≡)
    ("<="     . ?≤)
    (">="     . ?≥)
    ("=<<"    . (?= (Br . Bl) ??))
    (">>="    . (?? (Br . Bl) ?=))
    ("<=<"    . ??)
    (">=>"    . ??)
    ("&&"     . ?∧)
    ("||"     . ?∨)
    ("not"    . ??))
  "A list of symbol prettifications.
Nil to use font supports ligatures.")

;; Prettify Symbols
;; e.g. display “lambda” as “λ”
(use-package prog-mode
  :straight (:type built-in)
  :hook (prog-mode . prettify-symbols-mode)
  :init
  (setq-default prettify-symbols-alist +thomas/prettify-symbols-alist)
  (setq prettify-symbols-unprettify-at-point 'right-edge))

;;
(use-package project
  :straight (:type built-in)
  :init (setq project-list-file (concat thomas-data-dir "projects"))
  :general
  (thomas-leader-define
    "p!" 'project-shell-command ; 在项目根目录下执行命令
    "p&" 'project-async-shell-command
    "pa" 'project-remember-projects-under ; 添加新项目
    "pc" 'project-compile ; 执行编译命令
    "pd" 'project-find-dir ; 在 dired 中打开选定的文件夹
    "pD" 'project-dired ; 在项目根目录打开 dired
    "pe" 'project-eshell
    "pf" 'project-find-file ; 在项目中搜索文件
    "pF" 'project-or-external-find-file
    "pp" 'project-switch-project ; 切换项目
    "pv" 'project-vc-dir
    "px" 'project-execute-extended-command
    "pr" 'project-query-replace-regexp
    "ps" 'save-some-buffers
    "pk" 'project-kill-buffers); kill 所有项目 buffer
  :config
  (cl-defmethod project-root ((project (head local)))
    "Return root directory of current PROJECT."
    (cdr project))

  (defun project-try-local (dir)
    "Determine if DIR is a non-Git project."
    (unless (member (expand-file-name "" dir) project-ignore-directory-list)
      (catch 'ret
        (let ((pr-flags project-flag-list))
          (dolist (current-level pr-flags)
            (dolist (f current-level)
              (when-let ((root (locate-dominating-file dir f)))
                (when (not (member (expand-file-name "" root) project-ignore-directory-list))
                  (throw 'ret (cons 'local root))))))))))

  (setq project-find-functions '(project-try-local project-try-vc)))

(use-package compile
  ;; Compilation Mode
  :straight (:type built-in)
  :hook (compilation-filter . ansi-color-compilation-filter)
  :config
  (setq compilation-always-kill t ; kill compilation process before starting another
        compilation-ask-about-save nil  ; save all buffers on `compile'
        compilation-scroll-output 'first-error)
  (add-hook 'compilation-filter-hook #'comint-truncate-buffer)
  ;; Automatically truncate compilation buffers so they don't accumulate too
  ;; much data and bog down the rest of Emacs.
  (autoload 'comint-truncate-buffer "comint" nil t))

(use-package comint
  ;; ComintMode 用于制作 shell 或 repl 之类的缓冲区，在其中与外部进程交互。
  :straight (:type built-in)
  :config
  (setq comint-prompt-read-only t
        ;; double the default
        comint-buffer-maximum-size 2048)
  (add-to-list 'comint-output-filter-functions 'ansi-color-process-output))

;; 跳转，搜索相关功能
;; xref
(use-package xref
  :straight (:type built-in)
  :hook ((xref-after-return xref-after-jump) . recenter)
  :config
  ;; Emacs 28+
  ;;
  ;; `project-find-regexp' can be faster when setting `xref-search-program' to
  ;;  `ripgrep'.
  (setq xref-search-program (cond ((executable-find "rg") 'ripgrep)
                                  ((executable-find "ugrep") 'ugrep)
                                  (t 'grep))

        xref-history-storage 'xref-window-local-history
        xref-show-xrefs-function #'xref-show-definitions-completing-read
        xref-show-definitions-function #'xref-show-definitions-completing-read))

(use-package citre
  :defer t
  :init
  ;; This is needed in `:init' block for lazy load to work.
  (require 'citre-config)
  :config
  (setq
   ;; Set this if you want to always use one location to create a tags file.
   citre-default-create-tags-file-location 'global-cache
   ;; Set this if you'd like to use ctags options generated by Citre
   ;; directly, rather than further editing them.
   citre-edit-ctags-options-manually nil))

;; XML
(use-package nxml-mode
  :straight (:type built-in)
  :mode (("\\.xml\\'" . nxml-mode)
         ("\\.rss\\'" . nxml-mode))
  :config
  (setq nxml-slash-auto-complete-flag t
        nxml-auto-insert-xml-declaration-flag t))

;; Config files mode
(use-package yaml-mode
  :mode ("\\.ya?ml\\'" . yaml-mode))

;; Syntax highlighting for systemd files
(use-package conf-mode
  :straight (:type built-in)
  :mode ((rx "."
             (or "automount" "busname" "link" "mount" "netdev" "network"
                 "path" "service" "slice" "socket" "swap" "target" "timer")
             string-end) . conf-toml-mode))

(use-package restclient
  :mode ("\\.http\\'" . restclient-mode))

;; Tips for next keystroke
(use-package envrc
  :hook (find-file . envrc-global-mode)
  :config
  ;; Ensure babel's execution environment matches the host buffer's.
  (advice-add #'org-babel-execute-src-block
              :around #'envrc-propagate-environment))

;; Quickrun codes, including cpp. awesome!
(use-package quickrun
  :general
  (thomas-leader-define
    "e" '(:ignore t :wk "eval")
    "ea" 'quickrun-with-arg
    "eq" 'quickrun
    "er" 'quickrun-region
    "es" 'quickrun-shell
    "ep" 'quickrun-replace-region)
  :config
  (setq quickrun-focus-p nil
        quickrun-input-file-extension ".qr"))

(provide 'init-project)

;;; init-project.el ends here
